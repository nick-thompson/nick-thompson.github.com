// Generated by CoffeeScript 1.3.3
(function() {
  var Synth,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Synth = (function() {

    Synth.prototype.numHarmonics = 60;

    Synth.prototype.barWidth = 10;

    Synth.prototype.gainColor = '#999';

    Synth.prototype.phaseColor = '#777';

    Synth.prototype.audioContext = new webkitAudioContext();

    function Synth() {
      this.mouseHandler = __bind(this.mouseHandler, this);

      var _ref;
      this.data = new Float32Array(this.numHarmonics + 1);
      this.phase = new Float32Array(this.numHarmonics + 1);
      this.mouseHandler = this.mouseHandler.bind(this);
      _ref = this.drawInterface(), this.canvas = _ref[0], this.context = _ref[1];
      this.master = this.buildMaster();
      this.attachHandlers();
    }

    Synth.prototype.buildMaster = function() {
      var gain;
      gain = this.audioContext.createGainNode();
      gain.gain.value = 0.1;
      gain.connect(this.audioContext.destination);
      return gain;
    };

    Synth.prototype.drawInterface = function() {
      var canvas, context;
      canvas = document.createElement('canvas');
      canvas.width = this.numHarmonics * this.barWidth;
      canvas.height = 200;
      context = canvas.getContext('2d');
      document.body.appendChild(canvas);
      return [canvas, context];
    };

    Synth.prototype.drawBar = function(i) {
      this.context.fillStyle = "#fff";
      this.context.fillRect(i * this.barWidth, 0, this.barWidth, 200);
      this.context.fillStyle = this.gainColor;
      this.context.fillRect(i * this.barWidth, 100, this.barWidth, -(this.data[i + 1] * 100));
      this.context.fillStyle = this.phaseColor;
      return this.context.fillRect(i * this.barWidth, 100, this.barWidth, this.phase[i + 1] * 100);
    };

    Synth.prototype.mouseHandler = function(e) {
      var idx, offset;
      idx = Math.floor(e.offsetX / this.barWidth);
      if (this.clickDirection === 1) {
        offset = e.offsetY < 100 ? e.offsetY : 100;
        this.data[idx + 1] = (100 - offset) / 100;
      } else if (this.clickDirection === -1) {
        offset = e.offsetY > 100 ? e.offsetY : 100;
        this.phase[idx + 1] = (offset - 100) / 100;
      }
      this.drawBar(idx);
      return this.buildWaveTable();
    };

    Synth.prototype.attachHandlers = function() {
      var _this = this;
      this.canvas.addEventListener('mousedown', function(e) {
        _this.clickDirection = e.offsetY > 100 ? -1 : 1;
        _this.mouseHandler(e);
        return _this.canvas.addEventListener('mousemove', _this.mouseHandler);
      });
      return this.canvas.addEventListener('mouseup', function(e) {
        return _this.canvas.removeEventListener('mousemove', _this.mouseHandler);
      });
    };

    Synth.prototype.buildWaveTable = function() {
      var ai, an, bi, bn, i, radians, shift, _i, _ref;
      an = new Float32Array(this.phase.length);
      bn = new Float32Array(this.data);
      for (i = _i = 0, _ref = this.data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        shift = this.phase[i];
        radians = 2 * Math.PI * shift;
        ai = (an[i] * Math.cos(radians)) - (bn[i] * Math.sin(radians));
        bi = (an[i] * Math.sin(radians)) + (bn[i] * Math.cos(radians));
        an[i] = ai;
        bn[i] = bi;
      }
      return this.waveTable = this.audioContext.createWaveTable(an, bn);
    };

    Synth.prototype.voiceOn = function(note) {
      var freqFromMidi, osc;
      freqFromMidi = function(note) {
        return 440 * Math.pow(2, (note - 69) / 12);
      };
      osc = this.audioContext.createOscillator();
      osc.setWaveTable(this.waveTable);
      osc.frequency.value = freqFromMidi(note);
      osc.connect(this.master);
      osc.noteOn(0);
      this.nodes || (this.nodes = {});
      return this.nodes[note] = osc;
    };

    Synth.prototype.voiceOff = function(note) {
      if (this.nodes[note] != null) {
        this.nodes[note].noteOff(0);
        this.nodes[note].disconnect();
        return delete this.nodes[note];
      }
    };

    return Synth;

  })();

  window.addEventListener('load', function(e) {
    var decodeMessage, midiMessageReceived, synth;
    synth = new Synth();
    decodeMessage = function(msg) {
      var channel, cmd, note, vel;
      cmd = msg.data[0] >> 4;
      channel = msg.data[0] & 0xf;
      note = msg.data[1];
      vel = msg.data[2];
      if (cmd === 9) {
        synth.voiceOn(note);
      }
      if (cmd === 8) {
        return synth.voiceOff(note);
      }
    };
    midiMessageReceived = function(msgs) {
      var msg, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = msgs.length; _i < _len; _i++) {
        msg = msgs[_i];
        _results.push(decodeMessage(msg));
      }
      return _results;
    };
    return MIDIKeys.onmessage = midiMessageReceived;
  });

}).call(this);
