// Generated by CoffeeScript 1.3.3
(function() {
  var GameOfLife, audioContext, buffer, buffers, compressorNode, data, delay1GainNode, delay1Node, delay2GainNode, delay2Node, f, filterNode, freq, gainNode, i, j, scale, _i, _j, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  audioContext = new webkitAudioContext();

  filterNode = audioContext.createBiquadFilter();

  filterNode.type = 0;

  filterNode.frequency.value = 1200;

  filterNode.Q.value = 0.4;

  gainNode = audioContext.createGainNode();

  gainNode.gain.value = 0.1;

  delay1Node = audioContext.createDelayNode();

  delay1GainNode = audioContext.createGainNode();

  delay1Node.delayTime.value = 0.45;

  delay1GainNode.gain.value = 0.2;

  delay2Node = audioContext.createDelayNode();

  delay2GainNode = audioContext.createGainNode();

  delay2Node.delayTime.value = 0.90;

  delay2GainNode.gain.value = 0.1;

  compressorNode = audioContext.createDynamicsCompressor();

  compressorNode.threshold = -10.0;

  compressorNode.ratio = 3.0;

  compressorNode.knee = 2.5;

  filterNode.connect(gainNode);

  gainNode.connect(delay1Node);

  gainNode.connect(delay2Node);

  gainNode.connect(compressorNode);

  delay1Node.connect(delay1GainNode);

  delay1GainNode.connect(compressorNode);

  delay2Node.connect(delay2GainNode);

  delay2GainNode.connect(compressorNode);

  compressorNode.connect(audioContext.destination);

  scale = [1, 4, 6, 9, 11, 13, 16, 18, 21, 23, 25, 28, 30, 33, 35, 37, 40, 42, 45, 47, 49];

  freq = function(i) {
    return 110 * Math.pow(2, i / 12);
  };

  buffers = [];

  for (i = _i = 0, _ref = scale.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    buffer = audioContext.createBuffer(1, 32768, audioContext.sampleRate);
    data = buffer.getChannelData(0);
    for (j = _j = 0, _ref1 = data.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
      f = freq(scale[i]);
      data[j] = Math.sin(2 * Math.PI * j * f / audioContext.sampleRate);
      data[j] = data[j] * Math.pow(1 - (j / data.length), 2);
    }
    buffers.push(buffer);
  }

  GameOfLife = (function() {

    GameOfLife.prototype.gridSize = 42;

    GameOfLife.prototype.canvasSize = 400;

    GameOfLife.prototype.lineColor = '#fff';

    GameOfLife.prototype.liveColor = '#9fe9fc';

    GameOfLife.prototype.deadColor = '#fff';

    GameOfLife.prototype.initialLifeProbability = 0.4;

    function GameOfLife(options) {
      var key, value,
        _this = this;
      if (options == null) {
        options = {};
      }
      this.prepareRedraw = __bind(this.prepareRedraw, this);

      this.circleOfLife = __bind(this.circleOfLife, this);

      for (key in options) {
        value = options[key];
        this[key] = value;
      }
      this.world = this.createWorld();
      this.circleOfLife();
      this.nextTick = 1;
      this.metronome = new Metronome(220, 1);
      this.prepareRedraw();
      this.metronome.start();
      this.metronome.addListener("t" + this.gridSize, function() {
        _this.world = _this.travelWorld(function(cell) {
          return _this.resolveNextGeneration(cell);
        });
        _this.nextTick = 1;
        _this.prepareRedraw();
        return _this.metronome.startFrom(1);
      });
      null;
    }

    GameOfLife.prototype.createWorld = function() {
      var _this = this;
      return this.travelWorld(function(cell) {
        cell.live = Math.random() < _this.initialLifeProbability;
        return cell;
      });
    };

    GameOfLife.prototype.circleOfLife = function() {
      var _this = this;
      return this.world = this.travelWorld(function(cell) {
        cell = _this.world[cell.row][cell.col];
        _this.draw(cell);
        return _this.resolveNextGeneration(cell);
      });
    };

    GameOfLife.prototype.prepareRedraw = function() {
      var row, _k, _ref2, _results,
        _this = this;
      _results = [];
      for (row = _k = 0, _ref2 = this.gridSize; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; row = 0 <= _ref2 ? ++_k : --_k) {
        _results.push((function(row) {
          return _this.metronome.addListener("t" + (_this.nextTick++), function() {
            var col, _fn, _l, _ref3;
            _fn = function(col) {
              var cell;
              cell = _this.world[row][col];
              _this.draw(cell);
              if (cell.live && col % 2 === 0) {
                return _this.fire(buffers[col / 2]);
              }
            };
            for (col = _l = 0, _ref3 = _this.gridSize; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; col = 0 <= _ref3 ? ++_l : --_l) {
              _fn(col);
            }
            return true;
          });
        })(row));
      }
      return _results;
    };

    GameOfLife.prototype.fire = function(buffer) {
      var gain, node, panner;
      node = audioContext.createBufferSource();
      node.buffer = buffer;
      panner = audioContext.createPanner();
      panner.setPosition(0.5 - Math.random(), 0, 0.1);
      gain = audioContext.createGainNode();
      gain.gain.value = Math.random();
      node.connect(gain);
      gain.connect(panner);
      panner.connect(filterNode);
      return node.noteOn(0);
    };

    GameOfLife.prototype.resolveNextGeneration = function(cell) {
      var count;
      count = this.countNeighbors(cell);
      cell = {
        row: cell.row,
        col: cell.col,
        live: cell.live
      };
      if (cell.live || count === 3) {
        cell.live = (1 < count && count < 4);
      }
      return cell;
    };

    GameOfLife.prototype.countNeighbors = function(cell) {
      var col, neighbors, row, _k, _l;
      neighbors = 0;
      for (row = _k = -1; _k <= 1; row = ++_k) {
        for (col = _l = -1; _l <= 1; col = ++_l) {
          if ((row || col) && this.isAlive(cell.row + row, cell.col + col)) {
            ++neighbors;
          }
        }
      }
      return neighbors;
    };

    GameOfLife.prototype.isAlive = function(row, col) {
      var _ref2, _ref3;
      return !!((_ref2 = this.world[row]) != null ? (_ref3 = _ref2[col]) != null ? _ref3.live : void 0 : void 0);
    };

    GameOfLife.prototype.travelWorld = function(callback) {
      var col, row, _k, _ref2, _results;
      _results = [];
      for (row = _k = 0, _ref2 = this.gridSize; 0 <= _ref2 ? _k < _ref2 : _k > _ref2; row = 0 <= _ref2 ? ++_k : --_k) {
        _results.push((function() {
          var _l, _ref3, _results1;
          _results1 = [];
          for (col = _l = 0, _ref3 = this.gridSize; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; col = 0 <= _ref3 ? ++_l : --_l) {
            _results1.push(callback.call(this, {
              row: row,
              col: col
            }));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    GameOfLife.prototype.draw = function(cell) {
      var coords;
      this.context || (this.context = this.createDrawingContext());
      this.cellsize || (this.cellsize = this.canvasSize / this.gridSize);
      coords = [cell.row * this.cellsize, cell.col * this.cellsize, this.cellsize, this.cellsize];
      this.context.strokeStyle = this.lineColor;
      this.context.strokeRect.apply(this.context, coords);
      this.context.fillStyle = cell.live ? this.liveColor : this.deadColor;
      return this.context.fillRect.apply(this.context, coords);
    };

    GameOfLife.prototype.createDrawingContext = function() {
      var canvas;
      canvas = document.createElement('canvas');
      canvas.width = this.canvasSize;
      canvas.height = this.canvasSize;
      document.body.appendChild(canvas);
      return canvas.getContext('2d');
    };

    return GameOfLife;

  })();

  window.addEventListener('load', function() {
    var game;
    return game = new GameOfLife({});
  });

}).call(this);
